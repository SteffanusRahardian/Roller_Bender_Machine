//Library MenuLCDdanKeypad.h

// /*Urutan Pin LCD_I2C(Kiri ke kanan)
// 5V-Ground-Pin20SDA-Pin21SCL*/
// #ifndef MenuLCD_h#define MenuLCD_h
#ifndef MenuLCDdanKeypad_H
#define MenuLCDdanKeypad_H

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

// Inisialisasi pin LCD (RS, E, D4, D5, D6, D7)
LiquidCrystal_I2C lcd(0x27, 20, 4); //(7, 8, 9, 10, 11, 12);  

//-----Inisialisasi keypad 4x4-----------
#define UP 'A'            // NUMPAD 8
#define DOWN 'B'          // NUMPAD 2
#define LEFT '4'          // NUMPAD 4
#define RIGHT '6'         // NUMPAD 6
#define ENTER 'C'         // NUMPAD 5
#define BACK 'D'          // NUMPAD 7
#define BACKSPACE  '*'     // BACKSPACE
#define CLEAR '#'         // NUMPAD 

#define SATU '1'          // NUMPAD 
#define DUA '2'           // NUMPAD 
#define TIGA '3'          // NUMPAD 
#define EMPAT '4'         // NUMPAD 
#define LIMA '5'          // NUMPAD 
#define ENAM '6'          // NUMPAD 
#define TUJUH '7'         // NUMPAD 
#define DELAPAN '8'       // NUMPAD
#define SEMBILAN '9'      // NUMPAD
#define NOL '0'           // NUMPAD

const byte ROWS = 4; 
const byte COLS = 4; 

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {31, 33, 35, 37};    //Pin untuk baris keypad
byte colPins[COLS] = {23, 25, 27, 29};    //Pin untuk kolom keypad

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 
char customKey, holdKey;


//=====================================================================================
//=====================================================================================
//Variable Menu
int manualPWM = 0;                    //variabel simpan nilai input manual PWM
int bendingPWM = 0;                   //variable untuk menyimpan nilai PWM bending
bool inputtingPWM = false;            //Flag apakah sedang dalam mode input PWM manual atau tidak
bool isBendingModeSelected = false;   //Flag penanda apakah mode bending dipiih
bool isInCalibration = false;         //Flag penanda apakah memilih "kalibrasi Motor" pada menu lanjutan
bool isRunningProgram = false;        //Flag penanda apakah menu lanjutan "Jalankan program" dipilih

//Deklarasi prototipe fungsi
void setManualPWM();
void menuActionUtama();
void displayBendingMode(int mode, int pwm);
void readKeypad();
void MenuActionLanjutan();
void readCalibrationMenu();


int menuIndex = 0;
const int menuItems = 4;
String menuUtama[menuItems] = {
  "Bending 1(PWM=50)",
  "Bending 2(PWM=75)",
  "Bending 3(PWM=100)",
  "Set Manual PWM"
};

int calibrationMenuIndex = 0;
const int calibrationMenuItems = 3;
String menuLanjutan[calibrationMenuItems] = {
  "Kalibrasi Motor",
  "Jalankan Program",
  "Kembali"
};

long lastDebounceTime = 0;                        //untuk debounce tombol
long DebounceDelay = 200;                         //waktu delay untuk debounce

//fungsi menampilkan menu di LCD
void displayMenuUtama(){
  lcd.clear();
  for(int i = 0; i < menuItems; i++){
    if(i == menuIndex){
      lcd.setCursor(0, i);
      lcd.print("> ");          //Panah untuk memilih menu
      lcd.print(menuUtama[i]);
    }else{
      lcd.setCursor(2, i);
      lcd.print(menuUtama[i]);
    }
  }
}

//============================================================
//Fungsi untuk menampilkan menu kalibrasi tiap mode
void displayMenuLanjutan(){
  lcd.clear();
  for(int i = 0; i < calibrationMenuItems; i++){
    if(i == calibrationMenuIndex){
      lcd.setCursor(0, i);
      lcd.print("> ");          //Panah untuk memilih menu
      lcd.print(menuLanjutan[i]);
    }else{
      lcd.setCursor(2, i);
      lcd.print(menuLanjutan[i]);
    }
  }
}

//============================================================
//Fungsi untuk aksi saat menu dipilih
int kalibrasiValue = 0;
int bendValue = bendingPWM;

void menuActionUtama(){
  switch(menuIndex){
    case 0:                  //Saat pilih mode 1 (3mm)
      bendingPWM = 50;                         //Set nilai PWM mode bending 1     
      kalibrasiValue = -450;
      displayBendingMode(1, bendingPWM);       //Tampilkan mode 1 di LCD
      isBendingModeSelected = true;            //Tandai bahwa mode bending 1 telah dipilih
      break;
      
    case 1:             //saat pilih mode 2 (2mm)
      bendingPWM = 75;                        //Set nilai PWM mode bending 2 
      kalibrasiValue = -250;
      displayBendingMode(2, bendingPWM);      //Tampilkan mode 2 di LCD
      isBendingModeSelected = true;           //Tandai bahwa mode bending 2 telah dipilih
      break;

    case 2:             //saat piih mode 3 (1mm)
      bendingPWM = 100;                       //Set nilai PWM mode bending 3
      kalibrasiValue = -150;
      displayBendingMode(3, bendingPWM);      //Tampilkan mode 3 di LCD
      isBendingModeSelected = true;           //Tandai bahwa mode bending 3 telah dipilih
      break;

    case 3:             //saat pilih mode input PWM
      setManualPWM();
      isBendingModeSelected = true;
      break;
  }

  //Setelah memilih mode bending, tampilkan menu lanjutan(Kalibrasi, Jalankan Program, dan Kembali)
  if(isBendingModeSelected){
    displayMenuLanjutan();
  }
}


//====================================================================
//Fungsi untuk menampilkan mode bending yang dipilih secara sekilas
void displayBendingMode(int mode, int pwm){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Bending Mode ");
  lcd.print(mode);
  lcd.setCursor(0,1);
  lcd.print("PWM= ");
  lcd.print(pwm);
  delay(2000);
}

//=====================================================================
//Membaca input keypad dengan debounce
void readKeypad(){
  customKey = customKeypad.getKey();

  if(customKey && (millis() - lastDebounceTime > DebounceDelay)){
    lastDebounceTime = millis();      //Reset debounce timer

    switch(customKey){
      case UP:                                  //Jika tombol A/UP ditekan
        if(isBendingModeSelected){              //Cek jika dalam mode bending
          calibrationMenuIndex--;
          if(calibrationMenuIndex < 0){
            calibrationMenuIndex = calibrationMenuItems-1;
          }
          displayMenuLanjutan();
        }else{
        menuIndex--;
        if(menuIndex < 0){
          menuIndex = menuItems - 1;
        }
        displayMenuUtama();
        }
        break;
      
      case DOWN:                                   //Jika tombol B/DOWN ditekan
       if(isBendingModeSelected){                  //Cek jika dalam mode bending
          calibrationMenuIndex++;
          if(calibrationMenuIndex >= calibrationMenuItems){
            calibrationMenuIndex = 0;
          }
          displayMenuLanjutan();
       }else{
        menuIndex++;
        if(menuIndex >= menuItems){
          menuIndex = 0;
        }
        displayMenuUtama();
       }
      break;
      
      case ENTER:
      if(isBendingModeSelected){
        MenuActionLanjutan();
      }else{
        menuActionUtama();
      }
        break;
    }
  }
}

//====================================================================
//Fungsi untuk aksi saat menu lanjutan dipilih
void MenuActionLanjutan(){
  switch(calibrationMenuIndex){   
    case 0:                                       //Jika memilih "Kalibrasi Motor"
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Kalibrasi Motor...");
      Serial.println("Kalibrasi motor dipilih");
      isInCalibration = true;
      delay(2000); 
      break;

    case 1:                                            //Jika memilih "Jalankan Program"
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Jalankan Program");
      Serial.println("Jalankan program dipilih");
      delay(2000);

      if(bendingPWM > 0){
        isRunningProgram = true;                       //set flag, tidak langsung memanggil fungsi
      }else{
        lcd.setCursor(0,1);
        lcd.print("PWM belum diset!");
        lcd.setCursor(0,2);
        lcd.print("Tekan D kembali");

        bool tungguDditekan = true;
        while(tungguDditekan){
          readKeypad();
          if(customKey == 'D'){
            tungguDditekan = false;
            displayMenuLanjutan();
          }
          delay(200);
        }
        isRunningProgram = false;
      }
      break;
    
    case 2:                                               //Jika Memilih "Kembali"
      isBendingModeSelected = false;
      displayMenuUtama(); 
      return;
  }
}

//============================================================
//Fungsi untuk mengolah Menu Kalibrasi
void readCalibrationMenu(){
  customKey = customKeypad.getKey();

if(customKey && (millis() - lastDebounceTime > DebounceDelay)){
  lastDebounceTime = millis();      //Reset debounce timer
    
    if(customKey){
      switch(customKey){
        case UP:
          calibrationMenuIndex--;
          if(calibrationMenuIndex < 0){
            calibrationMenuIndex = calibrationMenuItems - 1;
          }
          displayMenuLanjutan();
          break;
      
        case DOWN:
          calibrationMenuIndex++;
          if(calibrationMenuIndex >= calibrationMenuItems){
            calibrationMenuIndex = 0;
          }
          displayMenuLanjutan();
          break;

        case ENTER:                   //Jika tombol C ditekan
          MenuActionLanjutan();       //Eksekusi ke menu lanjutan
          break;
        }
      }
  }
}


//=============================================================
// //Fungsi menginputkan manual PWM dengan keypad
void setManualPWM(){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Set Manual PWM: ");
  lcd.setCursor(0, 1);
  lcd.print("Nilai saat ini: ");
  lcd.print(manualPWM);               //menampilkan nilai inputan PWM

  inputtingPWM = true;
  manualPWM = 0;                      //nilai yang sudah ada, direset
  
  while(inputtingPWM){
  readKeypad();
    if(customKey){
      if(customKey >= '0' && customKey <= '9'){
        manualPWM = manualPWM * 10 + (customKey - '0');
        lcd.setCursor(0, 2);
        lcd.print("Nilai baru: ");
        lcd.print(manualPWM);

      }
      else if(customKey == '#'){      //tombol # untuk konfirmasi dan simpan nilai
        inputtingPWM = false;
         if(manualPWM > 255){
          manualPWM = 255;
          lcd.setCursor(0,3);
          lcd.print("PWM diset ke 255");
          delay(500);
         }else{
          lcd.setCursor(0, 3);
          lcd.print("PWM set!");
          bendingPWM = manualPWM;
        }
      delay(2000);
      isBendingModeSelected = true;
      displayMenuLanjutan();
      return;

      }
      else if(customKey == '*'){      //tombol * untuk reset nilai
        manualPWM = 0;
        lcd.setCursor(0, 2);
        lcd.print("Nilai baru: ");
        lcd.print(manualPWM);
      }
    }
    delay(200);
  }
  // isInCalibration = true;
  isBendingModeSelected = true;
  // displayMenuUtama();
  displayMenuLanjutan();
}

#endif
